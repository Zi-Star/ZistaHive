// This is your Prisma schema file

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id            String    @id @default(cuid())
  email         String    @unique
  name          String?
  password      String?
  emailVerified DateTime?
  image         String?
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
  
  profile       Profile?
  honeyBalance  HoneyBalance?
  sessions      Session[]
  accounts      Account[]
  
  @@map("users")
}

model Profile {
  id        String   @id @default(cuid())
  userId    String   @unique
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  bio       String?
  location  String?
  phone     String?
  beeRank   String   @default("Worker Bee")
  avatar    String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  
  @@map("profiles")
}

model HoneyBalance {
  id              String   @id @default(cuid())
  userId          String   @unique
  user            User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  balance         Int      @default(0)
  totalEarned     Int      @default(0)
  totalSpent      Int      @default(0)
  lastDailyReward DateTime?
  streakDays      Int      @default(0)
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt
  
  transactions    HoneyTransaction[]
  
  @@map("honey_balances")
}

model HoneyTransaction {
  id            String        @id @default(cuid())
  balanceId     String
  balance       HoneyBalance  @relation(fields: [balanceId], references: [id], onDelete: Cascade)
  amount        Int
  type          String        // 'earn' | 'spend'
  source        String        // 'daily_login', 'tool_use', 'purchase', etc.
  description   String?
  createdAt     DateTime      @default(now())
  
  @@map("honey_transactions")
}

model Session {
  id           String   @id @default(cuid())
  userId       String
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  sessionToken String   @unique
  expires      DateTime
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
  
  @@map("sessions")
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt

  @@unique([provider, providerAccountId])
  @@map("accounts")
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
  @@map("verification_tokens")
}
